<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import SwiftUI
import PlaygroundSupport
import AVKit

struct ProgressBar: View {
    @Binding var value: Float
    
    var body: some View {
        GeometryReader { geometry in
            ZStack(alignment: .leading) {
                Rectangle().frame(width: geometry.size.width , height: geometry.size.height)
                    .opacity(0.3)
                    .foregroundColor(Color(UIColor.systemTeal))
                
                Rectangle().frame(width: min(CGFloat(self.value) * geometry.size.width, geometry.size.width), height: geometry.size.height)
                    .foregroundColor(Color(UIColor(red: 233 / 255, green: 77 / 255, blue: 33 / 255, alpha: 1)))
                    .animation(.linear)
            }.cornerRadius(45.0)
        }
    }
}

struct IntroductionView: View {
    @State var progressValue: Float = 0.0
    @State var timer = Timer.publish(every: 0.33, on: .main, in: .common).autoconnect()
    let introductionText = [
        "Hello and welcome to my Swift Project for the Swift Student Challenge ...", 
        "My name is Guillaume Monot, üá´üá∑üë®‚ÄçüíªÔ£ø‚ù§Ô∏è  ...",
        "We are in a time where social distancing is important, to diminish the curve of the pandemic ...",
        "I wanted to contribute in a way for people by helping them learning new stuff and take time for themself ...",
        "My app will propose üéπ, relaxation ...",
        "I hope you'll like my first SwiftUI Project, stay safe and happy DubDub 2020"
    ]
    @State var timeRemaining = 12    
    @State var counter: Float = 0
    @State var index = 0
    
    var body: some View {
        VStack {
            ProgressBar(value: $progressValue).frame(height: 20)
            
            Spacer()
            
            HStack {
                Image(uiImage: #imageLiteral(resourceName: "wwdc-logo.png"))
                    .padding()
                Image(uiImage: #imageLiteral(resourceName: "swift-large.png"))
                    .resizable()
                    .frame(width: 80, height: 80)
                    .padding()
                
            }
            
            Text("\(introductionText[index])")
                .transition(.opacity)
                .font(.title)
                .multilineTextAlignment(.center)
                .padding(100)
                .onReceive(timer) { (_) in
                    self.counter += 1.0
                    
                    self.progressValue = Float(self.counter / (Float(self.introductionText.count) * 12.0))
                    
                    if (self.timeRemaining &gt; 0) {
                        self.timeRemaining -= 1
                    } else if (self.index &lt; self.introductionText.count - 1) {
                        self.timeRemaining = 12
                        self.index += 1
                    } 
            }
            Spacer()
        }.onAppear { 
            self.timer = Timer.publish(every: 0.33, on: .main, in: .common).autoconnect()
        }
    }
}

struct PianoView: View {
    
    @State var time: CGFloat = 0
    @State var player: AVAudioPlayer?
    
    var widthWhiteKey: CGFloat = 50
    var widthBlackKey: CGFloat = 30
    var heightWhiteKey: CGFloat = 200
    var heightBlackKey: CGFloat = 120
    var spacing: CGFloat = -32
    
    struct PianoKey: View {
        
        @Binding var player: AVAudioPlayer?
        var width: CGFloat
        var height: CGFloat
        var leadingOffset: CGFloat
        var trailingOffset: CGFloat
        var color: Color
        var url: URL
        var zIndex: Double
        
        var body: some View {
            
            Button(action: {
                
                self.playSound(url: self.url)
            }) {
                Text("")
                    .frame(width: width, height: height)
                    .padding()
                    .background(color)
                    .border(Color.black, width: 1)
            }
            .padding(EdgeInsets(top: 0, leading: leadingOffset, bottom: 0, trailing: trailingOffset))
            .zIndex(zIndex)
        }
        
        func playSound(url: URL) {
            do {
                self.player = try AVAudioPlayer(contentsOf: url)
                self.player?.play()
            } catch {
                print("Error while playing sound : \(url)")
            }
        }
    }
    
    var body: some View {
        
        VStack {
            
            Spacer()
            Text("Fun fact : \nLearning Piano is one of my 2021 goals")
                .multilineTextAlignment(.center)
                .font(.largeTitle)
            Spacer()
            
            VStack {
                Text("ü•á - Debussy - Clair de Lune")
                    .multilineTextAlignment(.center)
                Text("ü•à - Beethoven - Moonlight sonata - part 1,2,3")
                    .multilineTextAlignment(.center)
                Text("ü•â - Il vento d'oro")
                    .multilineTextAlignment(.center)
            }
            
            Spacer()
            
            HStack(alignment: .top, spacing: 0) {
                Group {
                    //                      1 - C
                    PianoKey(player: $player, width: widthWhiteKey, height: heightWhiteKey, leadingOffset: 0, trailingOffset: 0, color: Color.white, url: #fileLiteral(resourceName: "C.mp3"), zIndex: 0)
                    
                    //                      2 - Db
                    PianoKey(player: $player, width: widthBlackKey, height: heightBlackKey, leadingOffset: spacing, trailingOffset: spacing, color: Color.black, url: #fileLiteral(resourceName: "Db.mp3"), zIndex: 1)
                    
                    //                      3 - D
                    PianoKey(player: $player, width: widthWhiteKey, height: heightWhiteKey, leadingOffset: 0, trailingOffset: 0, color: Color.white, url: #fileLiteral(resourceName: "D.mp3"), zIndex: 0)
                    
                    //                      4 - Eb
                    PianoKey(player: $player, width: widthBlackKey, height: heightBlackKey, leadingOffset: spacing, trailingOffset: spacing, color: Color.black, url: #fileLiteral(resourceName: "Eb.mp3"), zIndex: 1)
                    
                    //                      5 - E
                    PianoKey(player: $player, width: widthWhiteKey, height: heightWhiteKey, leadingOffset: 0, trailingOffset: 0, color: Color.white, url: #fileLiteral(resourceName: "E.mp3"), zIndex: 0)
                    
                    //                      6 - F
                    PianoKey(player: $player, width: widthWhiteKey, height: heightWhiteKey, leadingOffset: 0, trailingOffset: 0, color: Color.white, url: #fileLiteral(resourceName: "F.mp3"), zIndex: 0)
                    
                    //                      7 - Gb
                    PianoKey(player: $player, width: widthBlackKey, height: heightBlackKey, leadingOffset: spacing, trailingOffset: spacing, color: Color.black, url: #fileLiteral(resourceName: "Gb.mp3"), zIndex: 1)
                    
                    //                      8 - G
                    PianoKey(player: $player, width: widthWhiteKey, height: heightWhiteKey, leadingOffset: 0, trailingOffset: 0, color: Color.white, url: #fileLiteral(resourceName: "G.mp3"), zIndex: 0)
                    
                    //                      9 - Ab
                    PianoKey(player: $player, width: widthBlackKey, height: heightBlackKey, leadingOffset: spacing, trailingOffset: spacing, color: Color.black, url: #fileLiteral(resourceName: "Ab.mp3"), zIndex: 1)
                    
                    //                      10 - A
                    PianoKey(player: $player, width: widthWhiteKey, height: heightWhiteKey, leadingOffset: 0, trailingOffset: 0, color: Color.white, url: #fileLiteral(resourceName: "A.mp3"), zIndex: 0)
                }
                
                //                      11 - Bb
                PianoKey(player: $player, width: widthBlackKey, height: heightBlackKey, leadingOffset: spacing, trailingOffset: spacing, color: Color.black, url: #fileLiteral(resourceName: "Bb.mp3"), zIndex: 1)
                
                //                      12 - B
                PianoKey(player: $player, width: widthWhiteKey, height: heightWhiteKey, leadingOffset: 0, trailingOffset: 0, color: Color.white, url: #fileLiteral(resourceName: "B.mp3"), zIndex: 0)
            }
        }.navigationBarTitle("Music Maestro")
    }
}


struct ActivityRingView: View {
    @Binding var progress: CGFloat
    
    var colors: [Color] = [Color.orange, Color.yellow]
    
    var body: some View {
        ZStack {
            Circle()
                .stroke(Color.blue, lineWidth: 20)
            Circle()
                .trim(from: 0, to: progress)
                .stroke(
                    AngularGradient(
                        gradient: Gradient(colors: colors),
                        center: .center,
                        startAngle: .degrees(0),
                        endAngle: .degrees(360)
                    ),
                    style: StrokeStyle(lineWidth: 20, lineCap: .round)
            ).rotationEffect(.degrees(-90))
            Circle()
                .frame(width: 20, height: 20)
                .foregroundColor(Color.orange)
                .offset(y: -150)
            Circle()
                .frame(width: 20, height: 20)
                .foregroundColor(progress &gt; 0.95 ? Color.yellow: Color.yellow.opacity(0))
                .offset(y: -150)
                .rotationEffect(Angle.degrees(360 * Double(progress)))
                .shadow(color: progress &gt; 0.96 ? Color.black.opacity(0.1): Color.clear, radius: 3, x: 4, y: 0)
        }.frame(idealWidth: 300, idealHeight: 300, alignment: .center)
    }
}

struct RelaxationView: View {
    
    @State var timer = Timer.publish(every: 1 / 10, on: .main, in: .common).autoconnect()
    @State var timeRemaining: CGFloat = 600
    @State var count: CGFloat = 0
    @State var progress: CGFloat = 0
    
    let relaxationWellness = "Relaxation helps to regain serenity, well-being and bodily relaxation. It helps everyone to free up their resources and energies. Objective of a session? Stay conscious as the body reaches a state of deep relaxation. Among its indications, relaxation allows you to regain self-confidence, overcome a phobia, fight against insomnia or stress, or relieve headaches."
    
    var body: some View {
        
        VStack {
            
            Text("Relax for one minute")
                .font(.largeTitle)
            Text(relaxationWellness)
                .multilineTextAlignment(.center)
                .padding(50)
            
            ZStack {
                ActivityRingView(progress: $progress)
                    .fixedSize()
                Text("\(Int(self.timeRemaining / 10))")
                    .font(.largeTitle)
                    .onReceive(self.timer) { (_) in
                        
                        if (self.timeRemaining &gt; 0) {
                            self.count += 1 / 10
                            self.progress = self.count / 60.0
                            self.timeRemaining -= 1
                        }
                }
            }.navigationBarTitle("Breath in ... Breath out")
        }.onAppear { 
            self.timer = Timer.publish(every: 1 / 10, on: .main, in: .common).autoconnect()
        }
    }
}

struct HomeView: View {
    var body: some View {
        NavigationView {
            
            List {
                NavigationLink(destination: RelaxationView()) {
                    HStack {
                        Text("üßò‚Äç‚ôÄÔ∏è")
                            .font(.largeTitle)
                        Text("Relaxation")
                            .font(.title)
                    }
                }.buttonStyle(PlainButtonStyle())
                                
                NavigationLink(destination: PianoView()) {
                    Text("üéπ")
                        .font(.largeTitle)
                    Text("Piano")
                        .font(.title)
                }.buttonStyle(PlainButtonStyle())
                
                NavigationLink(destination: IntroductionView()) {
                    Text("‚ù§Ô∏è")
                        .font(.largeTitle)
                    Text("This project")
                        .font(.title)
                    
                }.buttonStyle(PlainButtonStyle())
                
            }.navigationBarTitle(Text("Swift UI"))
        }.navigationViewStyle(StackNavigationViewStyle())
    }
}

PlaygroundPage.current.setLiveView(HomeView())
</string>
			<key>ModifiedRange</key>
			<string>{0, 12677}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
